<% layout('/layouts/boilerplate') %>
<head>
  <title>Book Details</title>
  <style>
    * { box-sizing: border-box; margin: 0; padding: 0; font-family: "Roboto", sans-serif; }
    body { background-color: #f3f4f6; color: #333; min-height: 100vh; padding: 0; }
    .main { display: flex; flex-direction: row; align-items: flex-start; gap: 2rem; background-color: #fff; padding: 2rem; border-radius: 12px; box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1); max-width: 950px; width: 100%; margin: auto; }
    .imgdata, .data { flex: 1; }
    .btns { display: flex; flex-wrap: wrap; gap: 1rem; margin-top: 1rem; }
    .btns button { color: #fff; background-color: #6a0dad; border: none; padding: 0.7rem 1.5rem; font-size: 1rem; border-radius: 6px; cursor: pointer; }
    #threeDMapContainer { display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: black; z-index: 999; }
    #closeMapBtn { position: absolute; top: 10px; right: 10px; background: red; color: white; padding: 10px; border: none; cursor: pointer; }
  </style>
</head>
<body>
  <div class="main">
    <div class="imgdata">
      <div class="logo">
        <p><%= bookdata.title[0] %></p>
        <img src="<%= bookdata.image %>" alt="Book Image" />
      </div>
      <p class="pp"><span>Author:</span> <%= bookdata.author %></p>
    </div>
    <div class="data">
      <h1><%= bookdata.title[0] %></h1>
      <p><%= bookdata.info %></p>
      <h3>Location: <%= bookdata.location %></h3>

      
      <div class="btns">
        <button id="view3DMapBtn">View 3D Map</button>
      </div>
      <div class="btns">
        <div style="display: flex; gap: 1rem">
          <% if (issuedBook) { %>
            <div id="days-left">Days left to return: <%= issuedBook.daysLeft %></div>
            <div id="charges">Charges: ₹<%= issuedBook.charges %></div>
            <!-- <form action="/books/returnss/<%= bookdata._id %>" method="GET">
              <button class="btn1">Return Book</button>
            </form> -->
          <% } else { %>
            <form action="/books/issue/<%= bookdata._id %>" method="GET">
              <button class="btn1">Issue Book</button>
            </form>
          <% } %>
        </div>

        <form action="/books">
          <button>Back</button>
        </form>

        <% if (user && user.role === 'admin') { %>
          <form action="/books/info/edit/<%= bookdata._id %>" method="GET">
            <button type="submit">Edit Data</button>
          </form>
        <% } %>
      </div>
    </div>
  </div>
  <div id="threeDMapContainer">
    <button id="closeMapBtn">Close</button>
  </div>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  
  <script>
    document.getElementById("view3DMapBtn").addEventListener("click", function() {
        document.getElementById("threeDMapContainer").style.display = "block";
        initThreeDLibrary();
    });

    document.getElementById("closeMapBtn").addEventListener("click", function() {
        document.getElementById("threeDMapContainer").style.display = "none";
    });

    function latLonToXYZ(lat, lon) {
    const scaleFactor = 500; // Pehle 500 tha, ab 10 kiya taaki out of bounds na jaye
    const xOffset = 0;  // X-axis shift ko zero rakho
    const zOffset = 0;  // Z-axis shift ko zero rakho

    return { 
        x: (lon - 77.100) * scaleFactor + xOffset, 
        z: (lat - 28.600) * scaleFactor + zOffset 
    };
}
function blockRackShelfToXYZ(block, rack, shelf) {
    const blockSpacing = 10;  // Block ke beech ka distance
    const rackSpacing = 9;   // Rack ke beech ka distance
    const shelfHeight = 1.5;  // Shelf ka height difference
    const rowOffset = (rack % 2 === 0) ? 5 : 0;  // Even racks thoda peeche shift

    return {
        x:block,  
        y: rack,  
        z: shelf // Alternate racks ke liye depth adjust
    };
}





    function initThreeDLibrary() {
        if (window.scene) return;
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0x222222);
        window.scene = scene;

        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.set(0, 10, 30);
        camera.lookAt(0, 3, 0);

        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.getElementById("threeDMapContainer").appendChild(renderer.domElement);

        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
        scene.add(ambientLight);
        const pointLight = new THREE.PointLight(0xffffff, 1);
        pointLight.position.set(10, 10, 10);
        scene.add(pointLight);

        // Floor
        const floorGeometry = new THREE.PlaneGeometry(50, 50);
        const floorMaterial = new THREE.MeshStandardMaterial({ color: 0xdddddd });
        const floor = new THREE.Mesh(floorGeometry, floorMaterial);
        floor.rotation.x = -Math.PI / 2;
        scene.add(floor);

        function addBookshelf(x, z) {
            const shelfGeometry = new THREE.BoxGeometry(4, 6, 1);
            const shelfMaterial = new THREE.MeshStandardMaterial({ color: 0x8B4513 });
            const shelf = new THREE.Mesh(shelfGeometry, shelfMaterial);
            shelf.position.set(x, 3, z);
            scene.add(shelf);
        }

        function addBook(x, y, z) {
            const bookGeometry = new THREE.BoxGeometry(0.8, 1.2, 0.4);
            const bookMaterial = new THREE.MeshStandardMaterial({ color: Math.random() * 0xffffff });
            const book = new THREE.Mesh(bookGeometry, bookMaterial);
            book.position.set(x, y, z);
            scene.add(book);
        }

        for (let r = -1; r <= 1; r++) {
            for (let c = -1; c <= 1; c++) {
                addBookshelf(r * 8, c * 8);
                for (let level = -2; level <= 2; level++) {
                    for (let col = -1; col <= 1; col++) {
                        for (let depth = -0.4; depth <= 0.4; depth += 0.4) {
                            addBook(r * 8 + col, 0.5 + (level + 2) * 1.2, c * 8 + depth);
                        }
                    }
                }
            }
        }

        let books;
        try {
            books = <%- JSON.stringify(bookdata) %>;
            if (!Array.isArray(books)) books = [books];
        } catch (e) {
            console.error("⚠️ Error parsing bookdata:", e);
            books = [];
        }

      // ✅ Load Font for Book Titles
const fontLoader = new THREE.FontLoader();
fontLoader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', function(font) {
    
  books.forEach(book => {
    if (!book.blockNumber || !book.rackNumber || !book.shelfNumber) return;

    let pos = blockRackShelfToXYZ(book.blockNumber, book.rackNumber, book.shelfNumber);
    console.log(`📌 Placing book: ${book.title[0]} at X: ${pos.x}, Y: ${pos.y}, Z: ${pos.z}`);

    // 🟥 **Book Position Marker**
    const markerGeometry = new THREE.SphereGeometry(0.5, 16, 16);
    const markerMaterial = new THREE.MeshStandardMaterial({ color: 0xff0000 });
    const markerMesh = new THREE.Mesh(markerGeometry, markerMaterial);
    markerMesh.position.set(pos.x, pos.y, pos.z);
    scene.add(markerMesh);

    // 🔤 **Book Name Label**
    const textGeo = new THREE.TextGeometry(book.title[0], {
        font: font,
        size: 0.5,
        height: 0.1
    });

    const textMat = new THREE.MeshBasicMaterial({ color: 0xffffff });
    const textMesh = new THREE.Mesh(textGeo, textMat);
    textMesh.position.set(pos.x - (book.title.length * 0.2), pos.y + 1, pos.z);
    textMesh.rotation.y = -Math.PI / 10;
    scene.add(textMesh);
});



});

           // Camera Controls
           camera.position.set(10, 10, 30);
        camera.lookAt(0, 3, 0);
        let moveSpeed = 1;
        let rotateSpeed = 0.02;
        function moveCamera(event) {
            switch (event.key) {
                case "w": camera.position.z -= moveSpeed; break;
                case "s": camera.position.z += moveSpeed; break;
                case "a": camera.position.x -= moveSpeed; break;
                case "d": camera.position.x += moveSpeed; break;
                case "q": camera.position.y += moveSpeed; break;
                case "e": camera.position.y -= moveSpeed; break;
                case "ArrowLeft": camera.rotation.y += rotateSpeed; break;
                case "ArrowRight": camera.rotation.y -= rotateSpeed; break;
                case "ArrowUp": camera.rotation.x += rotateSpeed; break;
                case "ArrowDown": camera.rotation.x -= rotateSpeed; break;
            }
        }
        document.addEventListener("keydown", moveCamera);
        function animate() {
            requestAnimationFrame(animate);
            renderer.render(scene, camera);
        }
        animate();
    }
  </script>
</body>
</html>
